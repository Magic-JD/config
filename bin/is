#!/bin/bash

for cmd in tput ddgr jq htmlq pandoc bat curl; do
    command -v "$cmd" &>/dev/null || { echo "Error: $cmd not found. Install it first."; exit 1; }
done

SEARCH="$*"
JSON=$(ddgr "$SEARCH" --json 2>/dev/null)

if [[ -z "$JSON" || "$JSON" == "[]" ]]; then
    echo "Error: No search results found."
    exit 1
fi

URL=$(jq -r '.[0].url' <<< "$JSON")
TITLE=$(jq -r '.[0].title' <<< "$JSON")

HTML=$(curl -sL -A "Mozilla/5.0 (compatible; MSIE 7.01; Windows NT 5.0)" "$URL")

if [[ -z "$HTML" ]]; then
    echo "Error: Failed to fetch content from $URL"
    exit 1
fi

extract_content() {
    local url="$1"
    local html="$2"

    case "$url" in
        *en.wikipedia.org*) html=$(htmlq 'p' <<< "$html") ;;
        *www.baeldung.com*) html=$(htmlq '.post-content' <<< "$html") ;;
        *www.w3schools.com*) html=$(htmlq '#main' <<< "$html") ;;
        *linuxhandbook.com*) html=$(htmlq 'article' <<< "$html") ;;
        *stackoverflow.com*) html=$(htmlq '.js-post-body, .user-details, .comment-body' <<< "$html") ;;
        *github.com*) html=$(htmlq '.markdown-body' <<< "$html") ;;
    esac

    echo "$html"
}

HTML=$(extract_content "$URL" "$HTML")

COLS=$(tput cols)

if [[ -n "$HTML" ]]; then
    pandoc -f html -t ansi --columns $(($COLS - 5)) <<< "$HTML" | bat --file-name "$TITLE ($URL)" --style 'header'
else
    echo "Error: No content extracted from $URL"
    exit 1
fi
